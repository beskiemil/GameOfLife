//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gra_w_życie.API {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="API.IGoLService")]
    public interface IGoLService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoLService/Login", ReplyAction="http://tempuri.org/IGoLService/LoginResponse")]
        bool Login(string nick, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoLService/Login", ReplyAction="http://tempuri.org/IGoLService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string nick, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoLService/Logout", ReplyAction="http://tempuri.org/IGoLService/LogoutResponse")]
        bool Logout(string nick);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoLService/Logout", ReplyAction="http://tempuri.org/IGoLService/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string nick);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoLService/GetAllRounds", ReplyAction="http://tempuri.org/IGoLService/GetAllRoundsResponse")]
        GameOfLifeService.Model.Cell[][][] GetAllRounds(int boardSide, int maxrounds, string nick, string name, GameOfLifeService.Model.Cell[][] startingCells);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGoLService/GetAllRounds", ReplyAction="http://tempuri.org/IGoLService/GetAllRoundsResponse")]
        System.Threading.Tasks.Task<GameOfLifeService.Model.Cell[][][]> GetAllRoundsAsync(int boardSide, int maxrounds, string nick, string name, GameOfLifeService.Model.Cell[][] startingCells);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGoLServiceChannel : Gra_w_życie.API.IGoLService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GoLServiceClient : System.ServiceModel.ClientBase<Gra_w_życie.API.IGoLService>, Gra_w_życie.API.IGoLService {
        
        public GoLServiceClient() {
        }
        
        public GoLServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GoLServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GoLServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GoLServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Login(string nick, string password) {
            return base.Channel.Login(nick, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string nick, string password) {
            return base.Channel.LoginAsync(nick, password);
        }
        
        public bool Logout(string nick) {
            return base.Channel.Logout(nick);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string nick) {
            return base.Channel.LogoutAsync(nick);
        }
        
        public GameOfLifeService.Model.Cell[][][] GetAllRounds(int boardSide, int maxrounds, string nick, string name, GameOfLifeService.Model.Cell[][] startingCells) {
            return base.Channel.GetAllRounds(boardSide, maxrounds, nick, name, startingCells);
        }
        
        public System.Threading.Tasks.Task<GameOfLifeService.Model.Cell[][][]> GetAllRoundsAsync(int boardSide, int maxrounds, string nick, string name, GameOfLifeService.Model.Cell[][] startingCells) {
            return base.Channel.GetAllRoundsAsync(boardSide, maxrounds, nick, name, startingCells);
        }
    }
}
